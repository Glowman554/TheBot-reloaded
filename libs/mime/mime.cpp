#include <mime.h>

std::string mime(std::string const& input) {
	if (input == "ez") return "application/andrew-inset";
	if (input == "aw") return "application/applixware";
	if (input == "atom") return "application/atom+xml";
	if (input == "atomcat") return "application/atomcat+xml";
	if (input == "atomdeleted") return "application/atomdeleted+xml";
	if (input == "atomsvc") return "application/atomsvc+xml";
	if (input == "dwd") return "application/atsc-dwd+xml";
	if (input == "held") return "application/atsc-held+xml";
	if (input == "rsat") return "application/atsc-rsat+xml";
	if (input == "bdoc") return "application/bdoc";
	if (input == "xcs") return "application/calendar+xml";
	if (input == "ccxml") return "application/ccxml+xml";
	if (input == "cdfx") return "application/cdfx+xml";
	if (input == "cdmia") return "application/cdmi-capability";
	if (input == "cdmic") return "application/cdmi-container";
	if (input == "cdmid") return "application/cdmi-domain";
	if (input == "cdmio") return "application/cdmi-object";
	if (input == "cdmiq") return "application/cdmi-queue";
	if (input == "cpl") return "application/cpl+xml";
	if (input == "cu") return "application/cu-seeme";
	if (input == "cwl") return "application/cwl";
	if (input == "mpd") return "application/dash+xml";
	if (input == "mpp") return "application/dash-patch+xml";
	if (input == "davmount") return "application/davmount+xml";
	if (input == "dbk") return "application/docbook+xml";
	if (input == "dssc") return "application/dssc+der";
	if (input == "xdssc") return "application/dssc+xml";
	if (input == "ecma") return "application/ecmascript";
	if (input == "emma") return "application/emma+xml";
	if (input == "emotionml") return "application/emotionml+xml";
	if (input == "epub") return "application/epub+zip";
	if (input == "exi") return "application/exi";
	if (input == "exp") return "application/express";
	if (input == "fdf") return "application/fdf";
	if (input == "fdt") return "application/fdt+xml";
	if (input == "pfr") return "application/font-tdpfr";
	if (input == "geojson") return "application/geo+json";
	if (input == "gml") return "application/gml+xml";
	if (input == "gpx") return "application/gpx+xml";
	if (input == "gxf") return "application/gxf";
	if (input == "gz") return "application/gzip";
	if (input == "hjson") return "application/hjson";
	if (input == "stk") return "application/hyperstudio";
	if (input == "ink") return "application/inkml+xml";
	if (input == "inkml") return "application/inkml+xml";
	if (input == "ipfix") return "application/ipfix";
	if (input == "its") return "application/its+xml";
	if (input == "jar") return "application/java-archive";
	if (input == "war") return "application/java-archive";
	if (input == "ear") return "application/java-archive";
	if (input == "ser") return "application/java-serialized-object";
	if (input == "class") return "application/java-vm";
	if (input == "js") return "application/javascript";
	if (input == "json") return "application/json";
	if (input == "map") return "application/json";
	if (input == "json5") return "application/json5";
	if (input == "jsonml") return "application/jsonml+json";
	if (input == "jsonld") return "application/ld+json";
	if (input == "lgr") return "application/lgr+xml";
	if (input == "lostxml") return "application/lost+xml";
	if (input == "hqx") return "application/mac-binhex40";
	if (input == "cpt") return "application/mac-compactpro";
	if (input == "mads") return "application/mads+xml";
	if (input == "webmanifest") return "application/manifest+json";
	if (input == "mrc") return "application/marc";
	if (input == "mrcx") return "application/marcxml+xml";
	if (input == "ma") return "application/mathematica";
	if (input == "nb") return "application/mathematica";
	if (input == "mb") return "application/mathematica";
	if (input == "mathml") return "application/mathml+xml";
	if (input == "mbox") return "application/mbox";
	if (input == "mpf") return "application/media-policy-dataset+xml";
	if (input == "mscml") return "application/mediaservercontrol+xml";
	if (input == "metalink") return "application/metalink+xml";
	if (input == "meta4") return "application/metalink4+xml";
	if (input == "mets") return "application/mets+xml";
	if (input == "maei") return "application/mmt-aei+xml";
	if (input == "musd") return "application/mmt-usd+xml";
	if (input == "mods") return "application/mods+xml";
	if (input == "m21") return "application/mp21";
	if (input == "mp21") return "application/mp21";
	if (input == "mp4s") return "application/mp4";
	if (input == "m4p") return "application/mp4";
	if (input == "doc") return "application/msword";
	if (input == "dot") return "application/msword";
	if (input == "mxf") return "application/mxf";
	if (input == "nq") return "application/n-quads";
	if (input == "nt") return "application/n-triples";
	if (input == "cjs") return "application/node";
	if (input == "bin") return "application/octet-stream";
	if (input == "dms") return "application/octet-stream";
	if (input == "lrf") return "application/octet-stream";
	if (input == "mar") return "application/octet-stream";
	if (input == "so") return "application/octet-stream";
	if (input == "dist") return "application/octet-stream";
	if (input == "distz") return "application/octet-stream";
	if (input == "pkg") return "application/octet-stream";
	if (input == "bpk") return "application/octet-stream";
	if (input == "dump") return "application/octet-stream";
	if (input == "elc") return "application/octet-stream";
	if (input == "deploy") return "application/octet-stream";
	if (input == "exe") return "application/octet-stream";
	if (input == "dll") return "application/octet-stream";
	if (input == "deb") return "application/octet-stream";
	if (input == "dmg") return "application/octet-stream";
	if (input == "iso") return "application/octet-stream";
	if (input == "img") return "application/octet-stream";
	if (input == "msi") return "application/octet-stream";
	if (input == "msp") return "application/octet-stream";
	if (input == "msm") return "application/octet-stream";
	if (input == "buffer") return "application/octet-stream";
	if (input == "oda") return "application/oda";
	if (input == "opf") return "application/oebps-package+xml";
	if (input == "ogx") return "application/ogg";
	if (input == "omdoc") return "application/omdoc+xml";
	if (input == "onetoc") return "application/onenote";
	if (input == "onetoc2") return "application/onenote";
	if (input == "onetmp") return "application/onenote";
	if (input == "onepkg") return "application/onenote";
	if (input == "oxps") return "application/oxps";
	if (input == "relo") return "application/p2p-overlay+xml";
	if (input == "xer") return "application/patch-ops-error+xml";
	if (input == "pdf") return "application/pdf";
	if (input == "pgp") return "application/pgp-encrypted";
	if (input == "asc") return "application/pgp-keys";
	if (input == "sig") return "application/pgp-signature";
	if (input == "asc") return "application/pgp-signature";
	if (input == "prf") return "application/pics-rules";
	if (input == "p10") return "application/pkcs10";
	if (input == "p7m") return "application/pkcs7-mime";
	if (input == "p7c") return "application/pkcs7-mime";
	if (input == "p7s") return "application/pkcs7-signature";
	if (input == "p8") return "application/pkcs8";
	if (input == "ac") return "application/pkix-attr-cert";
	if (input == "cer") return "application/pkix-cert";
	if (input == "crl") return "application/pkix-crl";
	if (input == "pkipath") return "application/pkix-pkipath";
	if (input == "pki") return "application/pkixcmp";
	if (input == "pls") return "application/pls+xml";
	if (input == "ai") return "application/postscript";
	if (input == "eps") return "application/postscript";
	if (input == "ps") return "application/postscript";
	if (input == "provx") return "application/provenance+xml";
	if (input == "cww") return "application/prs.cww";
	if (input == "xsf") return "application/prs.xsf+xml";
	if (input == "pskcxml") return "application/pskc+xml";
	if (input == "raml") return "application/raml+yaml";
	if (input == "rdf") return "application/rdf+xml";
	if (input == "owl") return "application/rdf+xml";
	if (input == "rif") return "application/reginfo+xml";
	if (input == "rnc") return "application/relax-ng-compact-syntax";
	if (input == "rl") return "application/resource-lists+xml";
	if (input == "rld") return "application/resource-lists-diff+xml";
	if (input == "rs") return "application/rls-services+xml";
	if (input == "rapd") return "application/route-apd+xml";
	if (input == "sls") return "application/route-s-tsid+xml";
	if (input == "rusd") return "application/route-usd+xml";
	if (input == "gbr") return "application/rpki-ghostbusters";
	if (input == "mft") return "application/rpki-manifest";
	if (input == "roa") return "application/rpki-roa";
	if (input == "rsd") return "application/rsd+xml";
	if (input == "rss") return "application/rss+xml";
	if (input == "rtf") return "application/rtf";
	if (input == "sbml") return "application/sbml+xml";
	if (input == "scq") return "application/scvp-cv-request";
	if (input == "scs") return "application/scvp-cv-response";
	if (input == "spq") return "application/scvp-vp-request";
	if (input == "spp") return "application/scvp-vp-response";
	if (input == "sdp") return "application/sdp";
	if (input == "senmlx") return "application/senml+xml";
	if (input == "sensmlx") return "application/sensml+xml";
	if (input == "setpay") return "application/set-payment-initiation";
	if (input == "setreg") return "application/set-registration-initiation";
	if (input == "shf") return "application/shf+xml";
	if (input == "siv") return "application/sieve";
	if (input == "sieve") return "application/sieve";
	if (input == "smi") return "application/smil+xml";
	if (input == "smil") return "application/smil+xml";
	if (input == "rq") return "application/sparql-query";
	if (input == "srx") return "application/sparql-results+xml";
	if (input == "gram") return "application/srgs";
	if (input == "grxml") return "application/srgs+xml";
	if (input == "sru") return "application/sru+xml";
	if (input == "ssdl") return "application/ssdl+xml";
	if (input == "ssml") return "application/ssml+xml";
	if (input == "swidtag") return "application/swid+xml";
	if (input == "tei") return "application/tei+xml";
	if (input == "teicorpus") return "application/tei+xml";
	if (input == "tfi") return "application/thraud+xml";
	if (input == "tsd") return "application/timestamped-data";
	if (input == "toml") return "application/toml";
	if (input == "trig") return "application/trig";
	if (input == "ttml") return "application/ttml+xml";
	if (input == "ubj") return "application/ubjson";
	if (input == "rsheet") return "application/urc-ressheet+xml";
	if (input == "td") return "application/urc-targetdesc+xml";
	if (input == "1km") return "application/vnd.1000minds.decision-model+xml";
	if (input == "plb") return "application/vnd.3gpp.pic-bw-large";
	if (input == "psb") return "application/vnd.3gpp.pic-bw-small";
	if (input == "pvb") return "application/vnd.3gpp.pic-bw-var";
	if (input == "tcap") return "application/vnd.3gpp2.tcap";
	if (input == "pwn") return "application/vnd.3m.post-it-notes";
	if (input == "aso") return "application/vnd.accpac.simply.aso";
	if (input == "imp") return "application/vnd.accpac.simply.imp";
	if (input == "acu") return "application/vnd.acucobol";
	if (input == "atc") return "application/vnd.acucorp";
	if (input == "acutc") return "application/vnd.acucorp";
	if (input == "air") return "application/vnd.adobe.air-application-installer-package+zip";
	if (input == "fcdt") return "application/vnd.adobe.formscentral.fcdt";
	if (input == "fxp") return "application/vnd.adobe.fxp";
	if (input == "fxpl") return "application/vnd.adobe.fxp";
	if (input == "xdp") return "application/vnd.adobe.xdp+xml";
	if (input == "xfdf") return "application/vnd.adobe.xfdf";
	if (input == "age") return "application/vnd.age";
	if (input == "ahead") return "application/vnd.ahead.space";
	if (input == "azf") return "application/vnd.airzip.filesecure.azf";
	if (input == "azs") return "application/vnd.airzip.filesecure.azs";
	if (input == "azw") return "application/vnd.amazon.ebook";
	if (input == "acc") return "application/vnd.americandynamics.acc";
	if (input == "ami") return "application/vnd.amiga.ami";
	if (input == "apk") return "application/vnd.android.package-archive";
	if (input == "cii") return "application/vnd.anser-web-certificate-issue-initiation";
	if (input == "fti") return "application/vnd.anser-web-funds-transfer-initiation";
	if (input == "atx") return "application/vnd.antix.game-component";
	if (input == "mpkg") return "application/vnd.apple.installer+xml";
	if (input == "key") return "application/vnd.apple.keynote";
	if (input == "m3u8") return "application/vnd.apple.mpegurl";
	if (input == "numbers") return "application/vnd.apple.numbers";
	if (input == "pages") return "application/vnd.apple.pages";
	if (input == "pkpass") return "application/vnd.apple.pkpass";
	if (input == "swi") return "application/vnd.aristanetworks.swi";
	if (input == "iota") return "application/vnd.astraea-software.iota";
	if (input == "aep") return "application/vnd.audiograph";
	if (input == "bmml") return "application/vnd.balsamiq.bmml+xml";
	if (input == "mpm") return "application/vnd.blueice.multipass";
	if (input == "bmi") return "application/vnd.bmi";
	if (input == "rep") return "application/vnd.businessobjects";
	if (input == "cdxml") return "application/vnd.chemdraw+xml";
	if (input == "mmd") return "application/vnd.chipnuts.karaoke-mmd";
	if (input == "cdy") return "application/vnd.cinderella";
	if (input == "csl") return "application/vnd.citationstyles.style+xml";
	if (input == "cla") return "application/vnd.claymore";
	if (input == "rp9") return "application/vnd.cloanto.rp9";
	if (input == "c4g") return "application/vnd.clonk.c4group";
	if (input == "c4d") return "application/vnd.clonk.c4group";
	if (input == "c4f") return "application/vnd.clonk.c4group";
	if (input == "c4p") return "application/vnd.clonk.c4group";
	if (input == "c4u") return "application/vnd.clonk.c4group";
	if (input == "c11amc") return "application/vnd.cluetrust.cartomobile-config";
	if (input == "c11amz") return "application/vnd.cluetrust.cartomobile-config-pkg";
	if (input == "csp") return "application/vnd.commonspace";
	if (input == "cdbcmsg") return "application/vnd.contact.cmsg";
	if (input == "cmc") return "application/vnd.cosmocaller";
	if (input == "clkx") return "application/vnd.crick.clicker";
	if (input == "clkk") return "application/vnd.crick.clicker.keyboard";
	if (input == "clkp") return "application/vnd.crick.clicker.palette";
	if (input == "clkt") return "application/vnd.crick.clicker.template";
	if (input == "clkw") return "application/vnd.crick.clicker.wordbank";
	if (input == "wbs") return "application/vnd.criticaltools.wbs+xml";
	if (input == "pml") return "application/vnd.ctc-posml";
	if (input == "ppd") return "application/vnd.cups-ppd";
	if (input == "car") return "application/vnd.curl.car";
	if (input == "pcurl") return "application/vnd.curl.pcurl";
	if (input == "dart") return "application/vnd.dart";
	if (input == "rdz") return "application/vnd.data-vision.rdz";
	if (input == "dbf") return "application/vnd.dbf";
	if (input == "uvf") return "application/vnd.dece.data";
	if (input == "uvvf") return "application/vnd.dece.data";
	if (input == "uvd") return "application/vnd.dece.data";
	if (input == "uvvd") return "application/vnd.dece.data";
	if (input == "uvt") return "application/vnd.dece.ttml+xml";
	if (input == "uvvt") return "application/vnd.dece.ttml+xml";
	if (input == "uvx") return "application/vnd.dece.unspecified";
	if (input == "uvvx") return "application/vnd.dece.unspecified";
	if (input == "uvz") return "application/vnd.dece.zip";
	if (input == "uvvz") return "application/vnd.dece.zip";
	if (input == "fe_launch") return "application/vnd.denovo.fcselayout-link";
	if (input == "dna") return "application/vnd.dna";
	if (input == "mlp") return "application/vnd.dolby.mlp";
	if (input == "dpg") return "application/vnd.dpgraph";
	if (input == "dfac") return "application/vnd.dreamfactory";
	if (input == "kpxx") return "application/vnd.ds-keypoint";
	if (input == "ait") return "application/vnd.dvb.ait";
	if (input == "svc") return "application/vnd.dvb.service";
	if (input == "geo") return "application/vnd.dynageo";
	if (input == "mag") return "application/vnd.ecowin.chart";
	if (input == "nml") return "application/vnd.enliven";
	if (input == "esf") return "application/vnd.epson.esf";
	if (input == "msf") return "application/vnd.epson.msf";
	if (input == "qam") return "application/vnd.epson.quickanime";
	if (input == "slt") return "application/vnd.epson.salt";
	if (input == "ssf") return "application/vnd.epson.ssf";
	if (input == "es3") return "application/vnd.eszigno3+xml";
	if (input == "et3") return "application/vnd.eszigno3+xml";
	if (input == "ez2") return "application/vnd.ezpix-album";
	if (input == "ez3") return "application/vnd.ezpix-package";
	if (input == "fdf") return "application/vnd.fdf";
	if (input == "mseed") return "application/vnd.fdsn.mseed";
	if (input == "seed") return "application/vnd.fdsn.seed";
	if (input == "dataless") return "application/vnd.fdsn.seed";
	if (input == "gph") return "application/vnd.flographit";
	if (input == "ftc") return "application/vnd.fluxtime.clip";
	if (input == "fm") return "application/vnd.framemaker";
	if (input == "frame") return "application/vnd.framemaker";
	if (input == "maker") return "application/vnd.framemaker";
	if (input == "book") return "application/vnd.framemaker";
	if (input == "fnc") return "application/vnd.frogans.fnc";
	if (input == "ltf") return "application/vnd.frogans.ltf";
	if (input == "fsc") return "application/vnd.fsc.weblaunch";
	if (input == "oas") return "application/vnd.fujitsu.oasys";
	if (input == "oa2") return "application/vnd.fujitsu.oasys2";
	if (input == "oa3") return "application/vnd.fujitsu.oasys3";
	if (input == "fg5") return "application/vnd.fujitsu.oasysgp";
	if (input == "bh2") return "application/vnd.fujitsu.oasysprs";
	if (input == "ddd") return "application/vnd.fujixerox.ddd";
	if (input == "xdw") return "application/vnd.fujixerox.docuworks";
	if (input == "xbd") return "application/vnd.fujixerox.docuworks.binder";
	if (input == "fzs") return "application/vnd.fuzzysheet";
	if (input == "txd") return "application/vnd.genomatix.tuxedo";
	if (input == "ggb") return "application/vnd.geogebra.file";
	if (input == "ggt") return "application/vnd.geogebra.tool";
	if (input == "gex") return "application/vnd.geometry-explorer";
	if (input == "gre") return "application/vnd.geometry-explorer";
	if (input == "gxt") return "application/vnd.geonext";
	if (input == "g2w") return "application/vnd.geoplan";
	if (input == "g3w") return "application/vnd.geospace";
	if (input == "gmx") return "application/vnd.gmx";
	if (input == "gdoc") return "application/vnd.google-apps.document";
	if (input == "gslides") return "application/vnd.google-apps.presentation";
	if (input == "gsheet") return "application/vnd.google-apps.spreadsheet";
	if (input == "kml") return "application/vnd.google-earth.kml+xml";
	if (input == "kmz") return "application/vnd.google-earth.kmz";
	if (input == "gqf") return "application/vnd.grafeq";
	if (input == "gqs") return "application/vnd.grafeq";
	if (input == "gac") return "application/vnd.groove-account";
	if (input == "ghf") return "application/vnd.groove-help";
	if (input == "gim") return "application/vnd.groove-identity-message";
	if (input == "grv") return "application/vnd.groove-injector";
	if (input == "gtm") return "application/vnd.groove-tool-message";
	if (input == "tpl") return "application/vnd.groove-tool-template";
	if (input == "vcg") return "application/vnd.groove-vcard";
	if (input == "hal") return "application/vnd.hal+xml";
	if (input == "zmm") return "application/vnd.handheld-entertainment+xml";
	if (input == "hbci") return "application/vnd.hbci";
	if (input == "les") return "application/vnd.hhe.lesson-player";
	if (input == "hpgl") return "application/vnd.hp-hpgl";
	if (input == "hpid") return "application/vnd.hp-hpid";
	if (input == "hps") return "application/vnd.hp-hps";
	if (input == "jlt") return "application/vnd.hp-jlyt";
	if (input == "pcl") return "application/vnd.hp-pcl";
	if (input == "pclxl") return "application/vnd.hp-pclxl";
	if (input == "sfd-hdstx") return "application/vnd.hydrostatix.sof-data";
	if (input == "mpy") return "application/vnd.ibm.minipay";
	if (input == "afp") return "application/vnd.ibm.modcap";
	if (input == "listafp") return "application/vnd.ibm.modcap";
	if (input == "list3820") return "application/vnd.ibm.modcap";
	if (input == "irm") return "application/vnd.ibm.rights-management";
	if (input == "sc") return "application/vnd.ibm.secure-container";
	if (input == "icc") return "application/vnd.iccprofile";
	if (input == "icm") return "application/vnd.iccprofile";
	if (input == "igl") return "application/vnd.igloader";
	if (input == "ivp") return "application/vnd.immervision-ivp";
	if (input == "ivu") return "application/vnd.immervision-ivu";
	if (input == "igm") return "application/vnd.insors.igm";
	if (input == "xpw") return "application/vnd.intercon.formnet";
	if (input == "xpx") return "application/vnd.intercon.formnet";
	if (input == "i2g") return "application/vnd.intergeo";
	if (input == "qbo") return "application/vnd.intu.qbo";
	if (input == "qfx") return "application/vnd.intu.qfx";
	if (input == "rcprofile") return "application/vnd.ipunplugged.rcprofile";
	if (input == "irp") return "application/vnd.irepository.package+xml";
	if (input == "xpr") return "application/vnd.is-xpr";
	if (input == "fcs") return "application/vnd.isac.fcs";
	if (input == "jam") return "application/vnd.jam";
	if (input == "rms") return "application/vnd.jcp.javame.midlet-rms";
	if (input == "jisp") return "application/vnd.jisp";
	if (input == "joda") return "application/vnd.joost.joda-archive";
	if (input == "ktz") return "application/vnd.kahootz";
	if (input == "ktr") return "application/vnd.kahootz";
	if (input == "karbon") return "application/vnd.kde.karbon";
	if (input == "chrt") return "application/vnd.kde.kchart";
	if (input == "kfo") return "application/vnd.kde.kformula";
	if (input == "flw") return "application/vnd.kde.kivio";
	if (input == "kon") return "application/vnd.kde.kontour";
	if (input == "kpr") return "application/vnd.kde.kpresenter";
	if (input == "kpt") return "application/vnd.kde.kpresenter";
	if (input == "ksp") return "application/vnd.kde.kspread";
	if (input == "kwd") return "application/vnd.kde.kword";
	if (input == "kwt") return "application/vnd.kde.kword";
	if (input == "htke") return "application/vnd.kenameaapp";
	if (input == "kia") return "application/vnd.kidspiration";
	if (input == "kne") return "application/vnd.kinar";
	if (input == "knp") return "application/vnd.kinar";
	if (input == "skp") return "application/vnd.koan";
	if (input == "skd") return "application/vnd.koan";
	if (input == "skt") return "application/vnd.koan";
	if (input == "skm") return "application/vnd.koan";
	if (input == "sse") return "application/vnd.kodak-descriptor";
	if (input == "lasxml") return "application/vnd.las.las+xml";
	if (input == "lbd") return "application/vnd.llamagraphics.life-balance.desktop";
	if (input == "lbe") return "application/vnd.llamagraphics.life-balance.exchange+xml";
	if (input == "123") return "application/vnd.lotus-1-2-3";
	if (input == "apr") return "application/vnd.lotus-approach";
	if (input == "pre") return "application/vnd.lotus-freelance";
	if (input == "nsf") return "application/vnd.lotus-notes";
	if (input == "org") return "application/vnd.lotus-organizer";
	if (input == "scm") return "application/vnd.lotus-screencam";
	if (input == "lwp") return "application/vnd.lotus-wordpro";
	if (input == "portpkg") return "application/vnd.macports.portpkg";
	if (input == "mvt") return "application/vnd.mapbox-vector-tile";
	if (input == "mcd") return "application/vnd.mcd";
	if (input == "mc1") return "application/vnd.medcalcdata";
	if (input == "cdkey") return "application/vnd.mediastation.cdkey";
	if (input == "mwf") return "application/vnd.mfer";
	if (input == "mfm") return "application/vnd.mfmp";
	if (input == "flo") return "application/vnd.micrografx.flo";
	if (input == "igx") return "application/vnd.micrografx.igx";
	if (input == "mif") return "application/vnd.mif";
	if (input == "daf") return "application/vnd.mobius.daf";
	if (input == "dis") return "application/vnd.mobius.dis";
	if (input == "mbk") return "application/vnd.mobius.mbk";
	if (input == "mqy") return "application/vnd.mobius.mqy";
	if (input == "msl") return "application/vnd.mobius.msl";
	if (input == "plc") return "application/vnd.mobius.plc";
	if (input == "txf") return "application/vnd.mobius.txf";
	if (input == "mpn") return "application/vnd.mophun.application";
	if (input == "mpc") return "application/vnd.mophun.certificate";
	if (input == "xul") return "application/vnd.mozilla.xul+xml";
	if (input == "cil") return "application/vnd.ms-artgalry";
	if (input == "cab") return "application/vnd.ms-cab-compressed";
	if (input == "xls") return "application/vnd.ms-excel";
	if (input == "xlm") return "application/vnd.ms-excel";
	if (input == "xla") return "application/vnd.ms-excel";
	if (input == "xlc") return "application/vnd.ms-excel";
	if (input == "xlt") return "application/vnd.ms-excel";
	if (input == "xlw") return "application/vnd.ms-excel";
	if (input == "xlam") return "application/vnd.ms-excel.addin.macroenabled.12";
	if (input == "xlsb") return "application/vnd.ms-excel.sheet.binary.macroenabled.12";
	if (input == "xlsm") return "application/vnd.ms-excel.sheet.macroenabled.12";
	if (input == "xltm") return "application/vnd.ms-excel.template.macroenabled.12";
	if (input == "eot") return "application/vnd.ms-fontobject";
	if (input == "chm") return "application/vnd.ms-htmlhelp";
	if (input == "ims") return "application/vnd.ms-ims";
	if (input == "lrm") return "application/vnd.ms-lrm";
	if (input == "thmx") return "application/vnd.ms-officetheme";
	if (input == "msg") return "application/vnd.ms-outlook";
	if (input == "cat") return "application/vnd.ms-pki.seccat";
	if (input == "stl") return "application/vnd.ms-pki.stl";
	if (input == "ppt") return "application/vnd.ms-powerpoint";
	if (input == "pps") return "application/vnd.ms-powerpoint";
	if (input == "pot") return "application/vnd.ms-powerpoint";
	if (input == "ppam") return "application/vnd.ms-powerpoint.addin.macroenabled.12";
	if (input == "pptm") return "application/vnd.ms-powerpoint.presentation.macroenabled.12";
	if (input == "sldm") return "application/vnd.ms-powerpoint.slide.macroenabled.12";
	if (input == "ppsm") return "application/vnd.ms-powerpoint.slideshow.macroenabled.12";
	if (input == "potm") return "application/vnd.ms-powerpoint.template.macroenabled.12";
	if (input == "mpp") return "application/vnd.ms-project";
	if (input == "mpt") return "application/vnd.ms-project";
	if (input == "docm") return "application/vnd.ms-word.document.macroenabled.12";
	if (input == "dotm") return "application/vnd.ms-word.template.macroenabled.12";
	if (input == "wps") return "application/vnd.ms-works";
	if (input == "wks") return "application/vnd.ms-works";
	if (input == "wcm") return "application/vnd.ms-works";
	if (input == "wdb") return "application/vnd.ms-works";
	if (input == "wpl") return "application/vnd.ms-wpl";
	if (input == "xps") return "application/vnd.ms-xpsdocument";
	if (input == "mseq") return "application/vnd.mseq";
	if (input == "mus") return "application/vnd.musician";
	if (input == "msty") return "application/vnd.muvee.style";
	if (input == "taglet") return "application/vnd.mynfc";
	if (input == "nlu") return "application/vnd.neurolanguage.nlu";
	if (input == "ntf") return "application/vnd.nitf";
	if (input == "nitf") return "application/vnd.nitf";
	if (input == "nnd") return "application/vnd.noblenet-directory";
	if (input == "nns") return "application/vnd.noblenet-sealer";
	if (input == "nnw") return "application/vnd.noblenet-web";
	if (input == "ac") return "application/vnd.nokia.n-gage.ac+xml";
	if (input == "ngdat") return "application/vnd.nokia.n-gage.data";
	if (input == "n-gage") return "application/vnd.nokia.n-gage.symbian.install";
	if (input == "rpst") return "application/vnd.nokia.radio-preset";
	if (input == "rpss") return "application/vnd.nokia.radio-presets";
	if (input == "edm") return "application/vnd.novadigm.edm";
	if (input == "edx") return "application/vnd.novadigm.edx";
	if (input == "ext") return "application/vnd.novadigm.ext";
	if (input == "odc") return "application/vnd.oasis.opendocument.chart";
	if (input == "otc") return "application/vnd.oasis.opendocument.chart-template";
	if (input == "odb") return "application/vnd.oasis.opendocument.database";
	if (input == "odf") return "application/vnd.oasis.opendocument.formula";
	if (input == "odft") return "application/vnd.oasis.opendocument.formula-template";
	if (input == "odg") return "application/vnd.oasis.opendocument.graphics";
	if (input == "otg") return "application/vnd.oasis.opendocument.graphics-template";
	if (input == "odi") return "application/vnd.oasis.opendocument.image";
	if (input == "oti") return "application/vnd.oasis.opendocument.image-template";
	if (input == "odp") return "application/vnd.oasis.opendocument.presentation";
	if (input == "otp") return "application/vnd.oasis.opendocument.presentation-template";
	if (input == "ods") return "application/vnd.oasis.opendocument.spreadsheet";
	if (input == "ots") return "application/vnd.oasis.opendocument.spreadsheet-template";
	if (input == "odt") return "application/vnd.oasis.opendocument.text";
	if (input == "odm") return "application/vnd.oasis.opendocument.text-master";
	if (input == "ott") return "application/vnd.oasis.opendocument.text-template";
	if (input == "oth") return "application/vnd.oasis.opendocument.text-web";
	if (input == "xo") return "application/vnd.olpc-sugar";
	if (input == "dd2") return "application/vnd.oma.dd2+xml";
	if (input == "obgx") return "application/vnd.openblox.game+xml";
	if (input == "oxt") return "application/vnd.openofficeorg.extension";
	if (input == "osm") return "application/vnd.openstreetmap.data+xml";
	if (input == "pptx") return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
	if (input == "sldx") return "application/vnd.openxmlformats-officedocument.presentationml.slide";
	if (input == "ppsx") return "application/vnd.openxmlformats-officedocument.presentationml.slideshow";
	if (input == "potx") return "application/vnd.openxmlformats-officedocument.presentationml.template";
	if (input == "xlsx") return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
	if (input == "xltx") return "application/vnd.openxmlformats-officedocument.spreadsheetml.template";
	if (input == "docx") return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
	if (input == "dotx") return "application/vnd.openxmlformats-officedocument.wordprocessingml.template";
	if (input == "mgp") return "application/vnd.osgeo.mapguide.package";
	if (input == "dp") return "application/vnd.osgi.dp";
	if (input == "esa") return "application/vnd.osgi.subsystem";
	if (input == "pdb") return "application/vnd.palm";
	if (input == "pqa") return "application/vnd.palm";
	if (input == "oprc") return "application/vnd.palm";
	if (input == "paw") return "application/vnd.pawaafile";
	if (input == "str") return "application/vnd.pg.format";
	if (input == "ei6") return "application/vnd.pg.osasli";
	if (input == "efif") return "application/vnd.picsel";
	if (input == "wg") return "application/vnd.pmi.widget";
	if (input == "plf") return "application/vnd.pocketlearn";
	if (input == "pbd") return "application/vnd.powerbuilder6";
	if (input == "box") return "application/vnd.previewsystems.box";
	if (input == "mgz") return "application/vnd.proteus.magazine";
	if (input == "qps") return "application/vnd.publishare-delta-tree";
	if (input == "ptid") return "application/vnd.pvi.ptid1";
	if (input == "xhtm") return "application/vnd.pwg-xhtml-print+xml";
	if (input == "qxd") return "application/vnd.quark.quarkxpress";
	if (input == "qxt") return "application/vnd.quark.quarkxpress";
	if (input == "qwd") return "application/vnd.quark.quarkxpress";
	if (input == "qwt") return "application/vnd.quark.quarkxpress";
	if (input == "qxl") return "application/vnd.quark.quarkxpress";
	if (input == "qxb") return "application/vnd.quark.quarkxpress";
	if (input == "rar") return "application/vnd.rar";
	if (input == "bed") return "application/vnd.realvnc.bed";
	if (input == "mxl") return "application/vnd.recordare.musicxml";
	if (input == "musicxml") return "application/vnd.recordare.musicxml+xml";
	if (input == "cryptonote") return "application/vnd.rig.cryptonote";
	if (input == "cod") return "application/vnd.rim.cod";
	if (input == "rm") return "application/vnd.rn-realmedia";
	if (input == "rmvb") return "application/vnd.rn-realmedia-vbr";
	if (input == "link66") return "application/vnd.route66.link66+xml";
	if (input == "st") return "application/vnd.sailingtracker.track";
	if (input == "see") return "application/vnd.seemail";
	if (input == "sema") return "application/vnd.sema";
	if (input == "semd") return "application/vnd.semd";
	if (input == "semf") return "application/vnd.semf";
	if (input == "ifm") return "application/vnd.shana.informed.formdata";
	if (input == "itp") return "application/vnd.shana.informed.formtemplate";
	if (input == "iif") return "application/vnd.shana.informed.interchange";
	if (input == "ipk") return "application/vnd.shana.informed.package";
	if (input == "twd") return "application/vnd.simtech-mindmapper";
	if (input == "twds") return "application/vnd.simtech-mindmapper";
	if (input == "mmf") return "application/vnd.smaf";
	if (input == "teacher") return "application/vnd.smart.teacher";
	if (input == "fo") return "application/vnd.software602.filler.form+xml";
	if (input == "sdkm") return "application/vnd.solent.sdkm+xml";
	if (input == "sdkd") return "application/vnd.solent.sdkm+xml";
	if (input == "dxp") return "application/vnd.spotfire.dxp";
	if (input == "sfs") return "application/vnd.spotfire.sfs";
	if (input == "sdc") return "application/vnd.stardivision.calc";
	if (input == "sda") return "application/vnd.stardivision.draw";
	if (input == "sdd") return "application/vnd.stardivision.impress";
	if (input == "smf") return "application/vnd.stardivision.math";
	if (input == "sdw") return "application/vnd.stardivision.writer";
	if (input == "vor") return "application/vnd.stardivision.writer";
	if (input == "sgl") return "application/vnd.stardivision.writer-global";
	if (input == "smzip") return "application/vnd.stepmania.package";
	if (input == "sm") return "application/vnd.stepmania.stepchart";
	if (input == "wadl") return "application/vnd.sun.wadl+xml";
	if (input == "sxc") return "application/vnd.sun.xml.calc";
	if (input == "stc") return "application/vnd.sun.xml.calc.template";
	if (input == "sxd") return "application/vnd.sun.xml.draw";
	if (input == "std") return "application/vnd.sun.xml.draw.template";
	if (input == "sxi") return "application/vnd.sun.xml.impress";
	if (input == "sti") return "application/vnd.sun.xml.impress.template";
	if (input == "sxm") return "application/vnd.sun.xml.math";
	if (input == "sxw") return "application/vnd.sun.xml.writer";
	if (input == "sxg") return "application/vnd.sun.xml.writer.global";
	if (input == "stw") return "application/vnd.sun.xml.writer.template";
	if (input == "sus") return "application/vnd.sus-calendar";
	if (input == "susp") return "application/vnd.sus-calendar";
	if (input == "svd") return "application/vnd.svd";
	if (input == "sis") return "application/vnd.symbian.install";
	if (input == "sisx") return "application/vnd.symbian.install";
	if (input == "xsm") return "application/vnd.syncml+xml";
	if (input == "bdm") return "application/vnd.syncml.dm+wbxml";
	if (input == "xdm") return "application/vnd.syncml.dm+xml";
	if (input == "ddf") return "application/vnd.syncml.dmddf+xml";
	if (input == "tao") return "application/vnd.tao.intent-module-archive";
	if (input == "pcap") return "application/vnd.tcpdump.pcap";
	if (input == "cap") return "application/vnd.tcpdump.pcap";
	if (input == "dmp") return "application/vnd.tcpdump.pcap";
	if (input == "tmo") return "application/vnd.tmobile-livetv";
	if (input == "tpt") return "application/vnd.trid.tpt";
	if (input == "mxs") return "application/vnd.triscape.mxs";
	if (input == "tra") return "application/vnd.trueapp";
	if (input == "ufd") return "application/vnd.ufdl";
	if (input == "ufdl") return "application/vnd.ufdl";
	if (input == "utz") return "application/vnd.uiq.theme";
	if (input == "umj") return "application/vnd.umajin";
	if (input == "unityweb") return "application/vnd.unity";
	if (input == "uoml") return "application/vnd.uoml+xml";
	if (input == "uo") return "application/vnd.uoml+xml";
	if (input == "vcx") return "application/vnd.vcx";
	if (input == "vsd") return "application/vnd.visio";
	if (input == "vst") return "application/vnd.visio";
	if (input == "vss") return "application/vnd.visio";
	if (input == "vsw") return "application/vnd.visio";
	if (input == "vis") return "application/vnd.visionary";
	if (input == "vsf") return "application/vnd.vsf";
	if (input == "wbxml") return "application/vnd.wap.wbxml";
	if (input == "wmlc") return "application/vnd.wap.wmlc";
	if (input == "wmlsc") return "application/vnd.wap.wmlscriptc";
	if (input == "wtb") return "application/vnd.webturbo";
	if (input == "nbp") return "application/vnd.wolfram.player";
	if (input == "wpd") return "application/vnd.wordperfect";
	if (input == "wqd") return "application/vnd.wqd";
	if (input == "stf") return "application/vnd.wt.stf";
	if (input == "xar") return "application/vnd.xara";
	if (input == "xfdl") return "application/vnd.xfdl";
	if (input == "hvd") return "application/vnd.yamaha.hv-dic";
	if (input == "hvs") return "application/vnd.yamaha.hv-script";
	if (input == "hvp") return "application/vnd.yamaha.hv-voice";
	if (input == "osf") return "application/vnd.yamaha.openscoreformat";
	if (input == "osfpvg") return "application/vnd.yamaha.openscoreformat.osfpvg+xml";
	if (input == "saf") return "application/vnd.yamaha.smaf-audio";
	if (input == "spf") return "application/vnd.yamaha.smaf-phrase";
	if (input == "cmp") return "application/vnd.yellowriver-custom-menu";
	if (input == "zir") return "application/vnd.zul";
	if (input == "zirz") return "application/vnd.zul";
	if (input == "zaz") return "application/vnd.zzazz.deck+xml";
	if (input == "vxml") return "application/voicexml+xml";
	if (input == "wasm") return "application/wasm";
	if (input == "wif") return "application/watcherinfo+xml";
	if (input == "wgt") return "application/widget";
	if (input == "hlp") return "application/winhlp";
	if (input == "wsdl") return "application/wsdl+xml";
	if (input == "wspolicy") return "application/wspolicy+xml";
	if (input == "7z") return "application/x-7z-compressed";
	if (input == "abw") return "application/x-abiword";
	if (input == "ace") return "application/x-ace-compressed";
	if (input == "dmg") return "application/x-apple-diskimage";
	if (input == "arj") return "application/x-arj";
	if (input == "aab") return "application/x-authorware-bin";
	if (input == "x32") return "application/x-authorware-bin";
	if (input == "u32") return "application/x-authorware-bin";
	if (input == "vox") return "application/x-authorware-bin";
	if (input == "aam") return "application/x-authorware-map";
	if (input == "aas") return "application/x-authorware-seg";
	if (input == "bcpio") return "application/x-bcpio";
	if (input == "bdoc") return "application/x-bdoc";
	if (input == "torrent") return "application/x-bittorrent";
	if (input == "blb") return "application/x-blorb";
	if (input == "blorb") return "application/x-blorb";
	if (input == "bz") return "application/x-bzip";
	if (input == "bz2") return "application/x-bzip2";
	if (input == "boz") return "application/x-bzip2";
	if (input == "cbr") return "application/x-cbr";
	if (input == "cba") return "application/x-cbr";
	if (input == "cbt") return "application/x-cbr";
	if (input == "cbz") return "application/x-cbr";
	if (input == "cb7") return "application/x-cbr";
	if (input == "vcd") return "application/x-cdlink";
	if (input == "cfs") return "application/x-cfs-compressed";
	if (input == "chat") return "application/x-chat";
	if (input == "pgn") return "application/x-chess-pgn";
	if (input == "crx") return "application/x-chrome-extension";
	if (input == "cco") return "application/x-cocoa";
	if (input == "nsc") return "application/x-conference";
	if (input == "cpio") return "application/x-cpio";
	if (input == "csh") return "application/x-csh";
	if (input == "deb") return "application/x-debian-package";
	if (input == "udeb") return "application/x-debian-package";
	if (input == "dgc") return "application/x-dgc-compressed";
	if (input == "dir") return "application/x-director";
	if (input == "dcr") return "application/x-director";
	if (input == "dxr") return "application/x-director";
	if (input == "cst") return "application/x-director";
	if (input == "cct") return "application/x-director";
	if (input == "cxt") return "application/x-director";
	if (input == "w3d") return "application/x-director";
	if (input == "fgd") return "application/x-director";
	if (input == "swa") return "application/x-director";
	if (input == "wad") return "application/x-doom";
	if (input == "ncx") return "application/x-dtbncx+xml";
	if (input == "dtb") return "application/x-dtbook+xml";
	if (input == "res") return "application/x-dtbresource+xml";
	if (input == "dvi") return "application/x-dvi";
	if (input == "evy") return "application/x-envoy";
	if (input == "eva") return "application/x-eva";
	if (input == "bdf") return "application/x-font-bdf";
	if (input == "gsf") return "application/x-font-ghostscript";
	if (input == "psf") return "application/x-font-linux-psf";
	if (input == "pcf") return "application/x-font-pcf";
	if (input == "snf") return "application/x-font-snf";
	if (input == "pfa") return "application/x-font-type1";
	if (input == "pfb") return "application/x-font-type1";
	if (input == "pfm") return "application/x-font-type1";
	if (input == "afm") return "application/x-font-type1";
	if (input == "arc") return "application/x-freearc";
	if (input == "spl") return "application/x-futuresplash";
	if (input == "gca") return "application/x-gca-compressed";
	if (input == "ulx") return "application/x-glulx";
	if (input == "gnumeric") return "application/x-gnumeric";
	if (input == "gramps") return "application/x-gramps-xml";
	if (input == "gtar") return "application/x-gtar";
	if (input == "hdf") return "application/x-hdf";
	if (input == "php") return "application/x-httpd-php";
	if (input == "install") return "application/x-install-instructions";
	if (input == "iso") return "application/x-iso9660-image";
	if (input == "key") return "application/x-iwork-keynote-sffkey";
	if (input == "numbers") return "application/x-iwork-numbers-sffnumbers";
	if (input == "pages") return "application/x-iwork-pages-sffpages";
	if (input == "jardiff") return "application/x-java-archive-diff";
	if (input == "jnlp") return "application/x-java-jnlp-file";
	if (input == "kdbx") return "application/x-keepass2";
	if (input == "latex") return "application/x-latex";
	if (input == "luac") return "application/x-lua-bytecode";
	if (input == "lzh") return "application/x-lzh-compressed";
	if (input == "lha") return "application/x-lzh-compressed";
	if (input == "run") return "application/x-makeself";
	if (input == "mie") return "application/x-mie";
	if (input == "prc") return "application/x-mobipocket-ebook";
	if (input == "mobi") return "application/x-mobipocket-ebook";
	if (input == "application") return "application/x-ms-application";
	if (input == "lnk") return "application/x-ms-shortcut";
	if (input == "wmd") return "application/x-ms-wmd";
	if (input == "wmz") return "application/x-ms-wmz";
	if (input == "xbap") return "application/x-ms-xbap";
	if (input == "mdb") return "application/x-msaccess";
	if (input == "obd") return "application/x-msbinder";
	if (input == "crd") return "application/x-mscardfile";
	if (input == "clp") return "application/x-msclip";
	if (input == "exe") return "application/x-msdos-program";
	if (input == "exe") return "application/x-msdownload";
	if (input == "dll") return "application/x-msdownload";
	if (input == "com") return "application/x-msdownload";
	if (input == "bat") return "application/x-msdownload";
	if (input == "msi") return "application/x-msdownload";
	if (input == "mvb") return "application/x-msmediaview";
	if (input == "m13") return "application/x-msmediaview";
	if (input == "m14") return "application/x-msmediaview";
	if (input == "wmf") return "application/x-msmetafile";
	if (input == "wmz") return "application/x-msmetafile";
	if (input == "emf") return "application/x-msmetafile";
	if (input == "emz") return "application/x-msmetafile";
	if (input == "mny") return "application/x-msmoney";
	if (input == "pub") return "application/x-mspublisher";
	if (input == "scd") return "application/x-msschedule";
	if (input == "trm") return "application/x-msterminal";
	if (input == "wri") return "application/x-mswrite";
	if (input == "nc") return "application/x-netcdf";
	if (input == "cdf") return "application/x-netcdf";
	if (input == "pac") return "application/x-ns-proxy-autoconfig";
	if (input == "nzb") return "application/x-nzb";
	if (input == "pl") return "application/x-perl";
	if (input == "pm") return "application/x-perl";
	if (input == "prc") return "application/x-pilot";
	if (input == "pdb") return "application/x-pilot";
	if (input == "p12") return "application/x-pkcs12";
	if (input == "pfx") return "application/x-pkcs12";
	if (input == "p7b") return "application/x-pkcs7-certificates";
	if (input == "spc") return "application/x-pkcs7-certificates";
	if (input == "p7r") return "application/x-pkcs7-certreqresp";
	if (input == "rar") return "application/x-rar-compressed";
	if (input == "rpm") return "application/x-redhat-package-manager";
	if (input == "ris") return "application/x-research-info-systems";
	if (input == "sea") return "application/x-sea";
	if (input == "sh") return "application/x-sh";
	if (input == "shar") return "application/x-shar";
	if (input == "swf") return "application/x-shockwave-flash";
	if (input == "xap") return "application/x-silverlight-app";
	if (input == "sql") return "application/x-sql";
	if (input == "sit") return "application/x-stuffit";
	if (input == "sitx") return "application/x-stuffitx";
	if (input == "srt") return "application/x-subrip";
	if (input == "sv4cpio") return "application/x-sv4cpio";
	if (input == "sv4crc") return "application/x-sv4crc";
	if (input == "t3") return "application/x-t3vm-image";
	if (input == "gam") return "application/x-tads";
	if (input == "tar") return "application/x-tar";
	if (input == "tcl") return "application/x-tcl";
	if (input == "tk") return "application/x-tcl";
	if (input == "tex") return "application/x-tex";
	if (input == "tfm") return "application/x-tex-tfm";
	if (input == "texinfo") return "application/x-texinfo";
	if (input == "texi") return "application/x-texinfo";
	if (input == "obj") return "application/x-tgif";
	if (input == "ustar") return "application/x-ustar";
	if (input == "hdd") return "application/x-virtualbox-hdd";
	if (input == "ova") return "application/x-virtualbox-ova";
	if (input == "ovf") return "application/x-virtualbox-ovf";
	if (input == "vbox") return "application/x-virtualbox-vbox";
	if (input == "vbox-extpack") return "application/x-virtualbox-vbox-extpack";
	if (input == "vdi") return "application/x-virtualbox-vdi";
	if (input == "vhd") return "application/x-virtualbox-vhd";
	if (input == "vmdk") return "application/x-virtualbox-vmdk";
	if (input == "src") return "application/x-wais-source";
	if (input == "webapp") return "application/x-web-app-manifest+json";
	if (input == "der") return "application/x-x509-ca-cert";
	if (input == "crt") return "application/x-x509-ca-cert";
	if (input == "pem") return "application/x-x509-ca-cert";
	if (input == "fig") return "application/x-xfig";
	if (input == "xlf") return "application/x-xliff+xml";
	if (input == "xpi") return "application/x-xpinstall";
	if (input == "xz") return "application/x-xz";
	if (input == "z1") return "application/x-zmachine";
	if (input == "z2") return "application/x-zmachine";
	if (input == "z3") return "application/x-zmachine";
	if (input == "z4") return "application/x-zmachine";
	if (input == "z5") return "application/x-zmachine";
	if (input == "z6") return "application/x-zmachine";
	if (input == "z7") return "application/x-zmachine";
	if (input == "z8") return "application/x-zmachine";
	if (input == "xaml") return "application/xaml+xml";
	if (input == "xav") return "application/xcap-att+xml";
	if (input == "xca") return "application/xcap-caps+xml";
	if (input == "xdf") return "application/xcap-diff+xml";
	if (input == "xel") return "application/xcap-el+xml";
	if (input == "xns") return "application/xcap-ns+xml";
	if (input == "xenc") return "application/xenc+xml";
	if (input == "xfdf") return "application/xfdf";
	if (input == "xhtml") return "application/xhtml+xml";
	if (input == "xht") return "application/xhtml+xml";
	if (input == "xlf") return "application/xliff+xml";
	if (input == "xml") return "application/xml";
	if (input == "xsl") return "application/xml";
	if (input == "xsd") return "application/xml";
	if (input == "rng") return "application/xml";
	if (input == "dtd") return "application/xml-dtd";
	if (input == "xop") return "application/xop+xml";
	if (input == "xpl") return "application/xproc+xml";
	if (input == "xsl") return "application/xslt+xml";
	if (input == "xslt") return "application/xslt+xml";
	if (input == "xspf") return "application/xspf+xml";
	if (input == "mxml") return "application/xv+xml";
	if (input == "xhvml") return "application/xv+xml";
	if (input == "xvml") return "application/xv+xml";
	if (input == "xvm") return "application/xv+xml";
	if (input == "yang") return "application/yang";
	if (input == "yin") return "application/yin+xml";
	if (input == "zip") return "application/zip";
	if (input == "3gpp") return "audio/3gpp";
	if (input == "adts") return "audio/aac";
	if (input == "aac") return "audio/aac";
	if (input == "adp") return "audio/adpcm";
	if (input == "amr") return "audio/amr";
	if (input == "au") return "audio/basic";
	if (input == "snd") return "audio/basic";
	if (input == "mid") return "audio/midi";
	if (input == "midi") return "audio/midi";
	if (input == "kar") return "audio/midi";
	if (input == "rmi") return "audio/midi";
	if (input == "mxmf") return "audio/mobile-xmf";
	if (input == "mp3") return "audio/mp3";
	if (input == "m4a") return "audio/mp4";
	if (input == "mp4a") return "audio/mp4";
	if (input == "mpga") return "audio/mpeg";
	if (input == "mp2") return "audio/mpeg";
	if (input == "mp2a") return "audio/mpeg";
	if (input == "mp3") return "audio/mpeg";
	if (input == "m2a") return "audio/mpeg";
	if (input == "m3a") return "audio/mpeg";
	if (input == "oga") return "audio/ogg";
	if (input == "ogg") return "audio/ogg";
	if (input == "spx") return "audio/ogg";
	if (input == "opus") return "audio/ogg";
	if (input == "s3m") return "audio/s3m";
	if (input == "sil") return "audio/silk";
	if (input == "uva") return "audio/vnd.dece.audio";
	if (input == "uvva") return "audio/vnd.dece.audio";
	if (input == "eol") return "audio/vnd.digital-winds";
	if (input == "dra") return "audio/vnd.dra";
	if (input == "dts") return "audio/vnd.dts";
	if (input == "dtshd") return "audio/vnd.dts.hd";
	if (input == "lvp") return "audio/vnd.lucent.voice";
	if (input == "pya") return "audio/vnd.ms-playready.media.pya";
	if (input == "ecelp4800") return "audio/vnd.nuera.ecelp4800";
	if (input == "ecelp7470") return "audio/vnd.nuera.ecelp7470";
	if (input == "ecelp9600") return "audio/vnd.nuera.ecelp9600";
	if (input == "rip") return "audio/vnd.rip";
	if (input == "wav") return "audio/wav";
	if (input == "wav") return "audio/wave";
	if (input == "weba") return "audio/webm";
	if (input == "aac") return "audio/x-aac";
	if (input == "aif") return "audio/x-aiff";
	if (input == "aiff") return "audio/x-aiff";
	if (input == "aifc") return "audio/x-aiff";
	if (input == "caf") return "audio/x-caf";
	if (input == "flac") return "audio/x-flac";
	if (input == "m4a") return "audio/x-m4a";
	if (input == "mka") return "audio/x-matroska";
	if (input == "m3u") return "audio/x-mpegurl";
	if (input == "wax") return "audio/x-ms-wax";
	if (input == "wma") return "audio/x-ms-wma";
	if (input == "ram") return "audio/x-pn-realaudio";
	if (input == "ra") return "audio/x-pn-realaudio";
	if (input == "rmp") return "audio/x-pn-realaudio-plugin";
	if (input == "ra") return "audio/x-realaudio";
	if (input == "wav") return "audio/x-wav";
	if (input == "xm") return "audio/xm";
	if (input == "cdx") return "chemical/x-cdx";
	if (input == "cif") return "chemical/x-cif";
	if (input == "cmdf") return "chemical/x-cmdf";
	if (input == "cml") return "chemical/x-cml";
	if (input == "csml") return "chemical/x-csml";
	if (input == "xyz") return "chemical/x-xyz";
	if (input == "ttc") return "font/collection";
	if (input == "otf") return "font/otf";
	if (input == "ttf") return "font/ttf";
	if (input == "woff") return "font/woff";
	if (input == "woff2") return "font/woff2";
	if (input == "exr") return "image/aces";
	if (input == "apng") return "image/apng";
	if (input == "avci") return "image/avci";
	if (input == "avcs") return "image/avcs";
	if (input == "avif") return "image/avif";
	if (input == "bmp") return "image/bmp";
	if (input == "dib") return "image/bmp";
	if (input == "cgm") return "image/cgm";
	if (input == "drle") return "image/dicom-rle";
	if (input == "emf") return "image/emf";
	if (input == "fits") return "image/fits";
	if (input == "g3") return "image/g3fax";
	if (input == "gif") return "image/gif";
	if (input == "heic") return "image/heic";
	if (input == "heics") return "image/heic-sequence";
	if (input == "heif") return "image/heif";
	if (input == "heifs") return "image/heif-sequence";
	if (input == "hej2") return "image/hej2k";
	if (input == "hsj2") return "image/hsj2";
	if (input == "ief") return "image/ief";
	if (input == "jls") return "image/jls";
	if (input == "jp2") return "image/jp2";
	if (input == "jpg2") return "image/jp2";
	if (input == "jpeg") return "image/jpeg";
	if (input == "jpg") return "image/jpeg";
	if (input == "jpe") return "image/jpeg";
	if (input == "jph") return "image/jph";
	if (input == "jhc") return "image/jphc";
	if (input == "jpm") return "image/jpm";
	if (input == "jpx") return "image/jpx";
	if (input == "jpf") return "image/jpx";
	if (input == "jxr") return "image/jxr";
	if (input == "jxra") return "image/jxra";
	if (input == "jxrs") return "image/jxrs";
	if (input == "jxs") return "image/jxs";
	if (input == "jxsc") return "image/jxsc";
	if (input == "jxsi") return "image/jxsi";
	if (input == "jxss") return "image/jxss";
	if (input == "ktx") return "image/ktx";
	if (input == "ktx2") return "image/ktx2";
	if (input == "png") return "image/png";
	if (input == "btif") return "image/prs.btif";
	if (input == "btf") return "image/prs.btif";
	if (input == "pti") return "image/prs.pti";
	if (input == "sgi") return "image/sgi";
	if (input == "svg") return "image/svg+xml";
	if (input == "svgz") return "image/svg+xml";
	if (input == "t38") return "image/t38";
	if (input == "tif") return "image/tiff";
	if (input == "tiff") return "image/tiff";
	if (input == "tfx") return "image/tiff-fx";
	if (input == "psd") return "image/vnd.adobe.photoshop";
	if (input == "azv") return "image/vnd.airzip.accelerator.azv";
	if (input == "uvi") return "image/vnd.dece.graphic";
	if (input == "uvvi") return "image/vnd.dece.graphic";
	if (input == "uvg") return "image/vnd.dece.graphic";
	if (input == "uvvg") return "image/vnd.dece.graphic";
	if (input == "djvu") return "image/vnd.djvu";
	if (input == "djv") return "image/vnd.djvu";
	if (input == "sub") return "image/vnd.dvb.subtitle";
	if (input == "dwg") return "image/vnd.dwg";
	if (input == "dxf") return "image/vnd.dxf";
	if (input == "fbs") return "image/vnd.fastbidsheet";
	if (input == "fpx") return "image/vnd.fpx";
	if (input == "fst") return "image/vnd.fst";
	if (input == "mmr") return "image/vnd.fujixerox.edmics-mmr";
	if (input == "rlc") return "image/vnd.fujixerox.edmics-rlc";
	if (input == "ico") return "image/vnd.microsoft.icon";
	if (input == "apng") return "image/vnd.mozilla.apng";
	if (input == "dds") return "image/vnd.ms-dds";
	if (input == "mdi") return "image/vnd.ms-modi";
	if (input == "wdp") return "image/vnd.ms-photo";
	if (input == "npx") return "image/vnd.net-fpx";
	if (input == "b16") return "image/vnd.pco.b16";
	if (input == "tap") return "image/vnd.tencent.tap";
	if (input == "vtf") return "image/vnd.valve.source.texture";
	if (input == "wbmp") return "image/vnd.wap.wbmp";
	if (input == "xif") return "image/vnd.xiff";
	if (input == "pcx") return "image/vnd.zbrush.pcx";
	if (input == "webp") return "image/webp";
	if (input == "wmf") return "image/wmf";
	if (input == "3ds") return "image/x-3ds";
	if (input == "ras") return "image/x-cmu-raster";
	if (input == "cmx") return "image/x-cmx";
	if (input == "fh") return "image/x-freehand";
	if (input == "fhc") return "image/x-freehand";
	if (input == "fh4") return "image/x-freehand";
	if (input == "fh5") return "image/x-freehand";
	if (input == "fh7") return "image/x-freehand";
	if (input == "ico") return "image/x-icon";
	if (input == "jng") return "image/x-jng";
	if (input == "sid") return "image/x-mrsid-image";
	if (input == "bmp") return "image/x-ms-bmp";
	if (input == "pcx") return "image/x-pcx";
	if (input == "pic") return "image/x-pict";
	if (input == "pct") return "image/x-pict";
	if (input == "pnm") return "image/x-portable-anymap";
	if (input == "pbm") return "image/x-portable-bitmap";
	if (input == "pgm") return "image/x-portable-graymap";
	if (input == "ppm") return "image/x-portable-pixmap";
	if (input == "rgb") return "image/x-rgb";
	if (input == "tga") return "image/x-tga";
	if (input == "xbm") return "image/x-xbitmap";
	if (input == "xpm") return "image/x-xpixmap";
	if (input == "xwd") return "image/x-xwindowdump";
	if (input == "disposition-notification") return "message/disposition-notification";
	if (input == "u8msg") return "message/global";
	if (input == "u8dsn") return "message/global-delivery-status";
	if (input == "u8mdn") return "message/global-disposition-notification";
	if (input == "u8hdr") return "message/global-headers";
	if (input == "eml") return "message/rfc822";
	if (input == "mime") return "message/rfc822";
	if (input == "wsc") return "message/vnd.wfa.wsc";
	if (input == "3mf") return "model/3mf";
	if (input == "gltf") return "model/gltf+json";
	if (input == "glb") return "model/gltf-binary";
	if (input == "igs") return "model/iges";
	if (input == "iges") return "model/iges";
	if (input == "msh") return "model/mesh";
	if (input == "mesh") return "model/mesh";
	if (input == "silo") return "model/mesh";
	if (input == "mtl") return "model/mtl";
	if (input == "obj") return "model/obj";
	if (input == "prc") return "model/prc";
	if (input == "stpx") return "model/step+xml";
	if (input == "stpz") return "model/step+zip";
	if (input == "stpxz") return "model/step-xml+zip";
	if (input == "stl") return "model/stl";
	if (input == "u3d") return "model/u3d";
	if (input == "dae") return "model/vnd.collada+xml";
	if (input == "dwf") return "model/vnd.dwf";
	if (input == "gdl") return "model/vnd.gdl";
	if (input == "gtw") return "model/vnd.gtw";
	if (input == "mts") return "model/vnd.mts";
	if (input == "ogex") return "model/vnd.opengex";
	if (input == "x_b") return "model/vnd.parasolid.transmit.binary";
	if (input == "x_t") return "model/vnd.parasolid.transmit.text";
	if (input == "pyo") return "model/vnd.pytha.pyox";
	if (input == "pyox") return "model/vnd.pytha.pyox";
	if (input == "vds") return "model/vnd.sap.vds";
	if (input == "usdz") return "model/vnd.usdz+zip";
	if (input == "bsp") return "model/vnd.valve.source.compiled-map";
	if (input == "vtu") return "model/vnd.vtu";
	if (input == "wrl") return "model/vrml";
	if (input == "vrml") return "model/vrml";
	if (input == "x3db") return "model/x3d+binary";
	if (input == "x3dbz") return "model/x3d+binary";
	if (input == "x3db") return "model/x3d+fastinfoset";
	if (input == "x3dv") return "model/x3d+vrml";
	if (input == "x3dvz") return "model/x3d+vrml";
	if (input == "x3d") return "model/x3d+xml";
	if (input == "x3dz") return "model/x3d+xml";
	if (input == "x3dv") return "model/x3d-vrml";
	if (input == "appcache") return "text/cache-manifest";
	if (input == "manifest") return "text/cache-manifest";
	if (input == "ics") return "text/calendar";
	if (input == "ifb") return "text/calendar";
	if (input == "coffee") return "text/coffeescript";
	if (input == "litcoffee") return "text/coffeescript";
	if (input == "css") return "text/css";
	if (input == "csv") return "text/csv";
	if (input == "html") return "text/html";
	if (input == "htm") return "text/html";
	if (input == "shtml") return "text/html";
	if (input == "jade") return "text/jade";
	if (input == "js") return "text/javascript";
	if (input == "mjs") return "text/javascript";
	if (input == "jsx") return "text/jsx";
	if (input == "less") return "text/less";
	if (input == "md") return "text/markdown";
	if (input == "markdown") return "text/markdown";
	if (input == "mml") return "text/mathml";
	if (input == "mdx") return "text/mdx";
	if (input == "n3") return "text/n3";
	if (input == "txt") return "text/plain";
	if (input == "text") return "text/plain";
	if (input == "conf") return "text/plain";
	if (input == "def") return "text/plain";
	if (input == "list") return "text/plain";
	if (input == "log") return "text/plain";
	if (input == "in") return "text/plain";
	if (input == "ini") return "text/plain";
	if (input == "dsc") return "text/prs.lines.tag";
	if (input == "rtx") return "text/richtext";
	if (input == "rtf") return "text/rtf";
	if (input == "sgml") return "text/sgml";
	if (input == "sgm") return "text/sgml";
	if (input == "shex") return "text/shex";
	if (input == "slim") return "text/slim";
	if (input == "slm") return "text/slim";
	if (input == "spdx") return "text/spdx";
	if (input == "stylus") return "text/stylus";
	if (input == "styl") return "text/stylus";
	if (input == "tsv") return "text/tab-separated-values";
	if (input == "t") return "text/troff";
	if (input == "tr") return "text/troff";
	if (input == "roff") return "text/troff";
	if (input == "man") return "text/troff";
	if (input == "me") return "text/troff";
	if (input == "ms") return "text/troff";
	if (input == "ttl") return "text/turtle";
	if (input == "uri") return "text/uri-list";
	if (input == "uris") return "text/uri-list";
	if (input == "urls") return "text/uri-list";
	if (input == "vcard") return "text/vcard";
	if (input == "curl") return "text/vnd.curl";
	if (input == "dcurl") return "text/vnd.curl.dcurl";
	if (input == "mcurl") return "text/vnd.curl.mcurl";
	if (input == "scurl") return "text/vnd.curl.scurl";
	if (input == "sub") return "text/vnd.dvb.subtitle";
	if (input == "ged") return "text/vnd.familysearch.gedcom";
	if (input == "fly") return "text/vnd.fly";
	if (input == "flx") return "text/vnd.fmi.flexstor";
	if (input == "gv") return "text/vnd.graphviz";
	if (input == "3dml") return "text/vnd.in3d.3dml";
	if (input == "spot") return "text/vnd.in3d.spot";
	if (input == "jad") return "text/vnd.sun.j2me.app-descriptor";
	if (input == "wml") return "text/vnd.wap.wml";
	if (input == "wmls") return "text/vnd.wap.wmlscript";
	if (input == "vtt") return "text/vtt";
	if (input == "s") return "text/x-asm";
	if (input == "asm") return "text/x-asm";
	if (input == "c") return "text/x-c";
	if (input == "cc") return "text/x-c";
	if (input == "cxx") return "text/x-c";
	if (input == "cpp") return "text/x-c";
	if (input == "h") return "text/x-c";
	if (input == "hh") return "text/x-c";
	if (input == "dic") return "text/x-c";
	if (input == "htc") return "text/x-component";
	if (input == "f") return "text/x-fortran";
	if (input == "for") return "text/x-fortran";
	if (input == "f77") return "text/x-fortran";
	if (input == "f90") return "text/x-fortran";
	if (input == "hbs") return "text/x-handlebars-template";
	if (input == "java") return "text/x-java-source";
	if (input == "lua") return "text/x-lua";
	if (input == "mkd") return "text/x-markdown";
	if (input == "nfo") return "text/x-nfo";
	if (input == "opml") return "text/x-opml";
	if (input == "org") return "text/x-org";
	if (input == "p") return "text/x-pascal";
	if (input == "pas") return "text/x-pascal";
	if (input == "pde") return "text/x-processing";
	if (input == "sass") return "text/x-sass";
	if (input == "scss") return "text/x-scss";
	if (input == "etx") return "text/x-setext";
	if (input == "sfv") return "text/x-sfv";
	if (input == "ymp") return "text/x-suse-ymp";
	if (input == "uu") return "text/x-uuencode";
	if (input == "vcs") return "text/x-vcalendar";
	if (input == "vcf") return "text/x-vcard";
	if (input == "xml") return "text/xml";
	if (input == "yaml") return "text/yaml";
	if (input == "yml") return "text/yaml";
	if (input == "3gp") return "video/3gpp";
	if (input == "3gpp") return "video/3gpp";
	if (input == "3g2") return "video/3gpp2";
	if (input == "h261") return "video/h261";
	if (input == "h263") return "video/h263";
	if (input == "h264") return "video/h264";
	if (input == "m4s") return "video/iso.segment";
	if (input == "jpgv") return "video/jpeg";
	if (input == "jpm") return "video/jpm";
	if (input == "jpgm") return "video/jpm";
	if (input == "mj2") return "video/mj2";
	if (input == "mjp2") return "video/mj2";
	if (input == "ts") return "video/mp2t";
	if (input == "mp4") return "video/mp4";
	if (input == "mp4v") return "video/mp4";
	if (input == "mpg4") return "video/mp4";
	if (input == "mpeg") return "video/mpeg";
	if (input == "mpg") return "video/mpeg";
	if (input == "mpe") return "video/mpeg";
	if (input == "m1v") return "video/mpeg";
	if (input == "m2v") return "video/mpeg";
	if (input == "ogv") return "video/ogg";
	if (input == "qt") return "video/quicktime";
	if (input == "mov") return "video/quicktime";
	if (input == "uvh") return "video/vnd.dece.hd";
	if (input == "uvvh") return "video/vnd.dece.hd";
	if (input == "uvm") return "video/vnd.dece.mobile";
	if (input == "uvvm") return "video/vnd.dece.mobile";
	if (input == "uvp") return "video/vnd.dece.pd";
	if (input == "uvvp") return "video/vnd.dece.pd";
	if (input == "uvs") return "video/vnd.dece.sd";
	if (input == "uvvs") return "video/vnd.dece.sd";
	if (input == "uvv") return "video/vnd.dece.video";
	if (input == "uvvv") return "video/vnd.dece.video";
	if (input == "dvb") return "video/vnd.dvb.file";
	if (input == "fvt") return "video/vnd.fvt";
	if (input == "mxu") return "video/vnd.mpegurl";
	if (input == "m4u") return "video/vnd.mpegurl";
	if (input == "pyv") return "video/vnd.ms-playready.media.pyv";
	if (input == "uvu") return "video/vnd.uvvu.mp4";
	if (input == "uvvu") return "video/vnd.uvvu.mp4";
	if (input == "viv") return "video/vnd.vivo";
	if (input == "webm") return "video/webm";
	if (input == "f4v") return "video/x-f4v";
	if (input == "fli") return "video/x-fli";
	if (input == "flv") return "video/x-flv";
	if (input == "m4v") return "video/x-m4v";
	if (input == "mkv") return "video/x-matroska";
	if (input == "mk3d") return "video/x-matroska";
	if (input == "mks") return "video/x-matroska";
	if (input == "mng") return "video/x-mng";
	if (input == "asf") return "video/x-ms-asf";
	if (input == "asx") return "video/x-ms-asf";
	if (input == "vob") return "video/x-ms-vob";
	if (input == "wm") return "video/x-ms-wm";
	if (input == "wmv") return "video/x-ms-wmv";
	if (input == "wmx") return "video/x-ms-wmx";
	if (input == "wvx") return "video/x-ms-wvx";
	if (input == "avi") return "video/x-msvideo";
	if (input == "movie") return "video/x-sgi-movie";
	if (input == "smv") return "video/x-smv";
	if (input == "ice") return "x-conference/x-cooltalk";
	return "unk";
}
